#define _WINSOCK_DEPRECATED_NO_WARNINGS
#pragma comment(lib,"ws2_32.lib")

#include<iostream>
#include<WinSock2.h>
#include<string>

void handleRequest(SOCKET new_wsocket, const std::string& route) {
    std::string serverMessage;

    if (route == "/aat") {
        serverMessage = "HTTP/1.1 200 OK\nContent-Type: text/html\nContent-Length: ";
        std::string response = "<html><h1>Hello world from /aat</h1></html>";
        serverMessage.append(std::to_string(response.size()));
        serverMessage.append("\n\n");
        serverMessage.append(response);
    } else {
        serverMessage = "HTTP/1.1 404 Not Found\nContent-Type: text/html\nContent-Length: 19\n\n<html><h1>404 Not Found</h1></html>";
    }

    int bytesSent = send(new_wsocket, serverMessage.c_str(), serverMessage.size(), 0);
    if (bytesSent < 0) {
        std::cout << "Could not send response  ";
    }

    std::cout << "Sent response to Client  \n";
    closesocket(new_wsocket);
}

int main() {
    std::cout << "Creating a server" << std::endl;
    SOCKET wsocket;
    SOCKET new_wsocket;
    WSADATA wsaData;
    struct sockaddr_in server;
    int server_len;
    int BUFFER_SIZE = 30720;

    ///initialize
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        std::cout << "Couldn't initialize the server";
    }

    ///create a socket
    wsocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (wsocket == INVALID_SOCKET) {
        std::cout << "Couldn't create socket";
    }

    ///bind socket to address
    server.sin_family = AF_INET;
    server.sin_addr.s_addr = inet_addr("127.0.0.1");
    server.sin_port = htons(8000);
    server_len = sizeof(server);

    if (bind(wsocket, (SOCKADDR*)&server, server_len) != 0) {
        std::cout << "Could not bind socket";
    }

    ///listen to address
    if (listen(wsocket, 10) != 0) {
        std::cout << "Could not start listening\n";
    }

    std::cout << "Listening on 127.0.0.1:8000\n";

    while (true) {
        new_wsocket = accept(wsocket, (SOCKADDR*)&server, &server_len);
        if (new_wsocket == INVALID_SOCKET) {
            std::cout << "Could not accept \n";
        }

        ///read request
        char buff[30720] = { 0 };
        int bytes = recv(new_wsocket, buff, BUFFER_SIZE, 0);
        if (bytes < 0) {
            std::cout << "Could not read Client request  ";
        }

        // Extract route from the HTTP request
        std::string request(buff);
        size_t start = request.find("GET ") + 4;
        size_t end = request.find(" ", start);
        std::string route = request.substr(start, end - start);

        handleRequest(new_wsocket, route);
    }

    closesocket(wsocket);
    WSACleanup();
    return 0;
}
