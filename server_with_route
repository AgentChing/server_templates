#define _WINSOCK_DEPRECATED_NO_WARNINGS
#pragma comment(lib, "ws2_32.lib")

#include <iostream>
#include <WinSock2.h>
#include <string>
#include "json.hpp"

using json = nlohmann::json;

void handleRequest(SOCKET new_wsocket, const std::string& route, const std::string& request) {
    std::string serverMessage;

    if (route == "/aat") {
        try {
            // Parse JSON data from the request
            json requestData = json::parse(request);

            // Process the JSON data (you can modify this part based on your requirements)
            std::string name = requestData["name"];
            int age = requestData["age"];

            // Create a JSON response object
            json responseObject;
            responseObject["message"] = "Data received and processed successfully";
            responseObject["name"] = name;
            responseObject["age"] = age;

            // Convert the JSON response object to a string
            std::string response = responseObject.dump();

            // Build the HTTP response
            serverMessage = "HTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: ";
            serverMessage.append(std::to_string(response.size()));
            serverMessage.append("\n\n");
            serverMessage.append(response);
        } catch (const std::exception& e) {
            // Handle JSON parsing error
            serverMessage = "HTTP/1.1 400 Bad Request\nContent-Type: text/html\nContent-Length: ";
            serverMessage.append(std::to_string(strlen(e.what())));
            serverMessage.append("\n\n");
            serverMessage.append(e.what());
        }
    } else {
        // Route not found
        serverMessage = "HTTP/1.1 404 Not Found\nContent-Type: text/html\nContent-Length: 19\n\n<html><h1>404 Not Found</h1></html>";
    }

    // Send the HTTP response
    int bytesSent = send(new_wsocket, serverMessage.c_str(), serverMessage.size(), 0);
    if (bytesSent < 0) {
        std::cout << "Could not send response  ";
    }

    std::cout << "Sent response to Client  \n";
    closesocket(new_wsocket);
}

int main() {
    // ... (same as before)

    while (true) {
        new_wsocket = accept(wsocket, (SOCKADDR*)&server, &server_len);
        if (new_wsocket == INVALID_SOCKET) {
            std::cout << "Could not accept \n";
        }

        // Read request
        char buff[30720] = { 0 };
        int bytes = recv(new_wsocket, buff, BUFFER_SIZE, 0);
        if (bytes < 0) {
            std::cout << "Could not read Client request  ";
        }

        // Extract route from the HTTP request
        std::string request(buff);
        size_t start = request.find("GET ") + 4;
        size_t end = request.find(" ", start);
        std::string route = request.substr(start, end - start);

        // Handle the request based on the route
        handleRequest(new_wsocket, route, request);
    }

    closesocket(wsocket);
    WSACleanup();
    return 0;
}
